NECESSARY UTILITIES :
 
  1. Install java JDK 1.7 on your Ubuntu or Mac machine
 
  2. Make sure the JDK is in your path. To test if the installation is correct :

      a. Execute “$ java -version” from the shell. 
   
      b. The output must be “$ java version “1.7.*” ” 

      
SETUP :

  1. The current directory is “omen+”

  2. Set up the OMEN_CLASSPATH
     You can set up the path using the script that is already provided.
     Execute “source ./scripts/init.sh” from current folder.

RUNNING A SIMPLE EXAMPLE :

   1. To test the tool, execute a simple example provided by us.

   2. Execute “sh ./scripts/test1.sh” from current directory.

   3. The library contains one deadlock which will should be output.

   4. The expected output from OMEN for this test along with source files is contained
      in tests/test1 directory. 
         	
	   a. The generated test cases are placed in “TestDriver.java” in ./output/test1 folder. Each test case will
              be invoked within function cycle* (Where * is the index of the test case)
           b. The deadlocks that are to be detected by executing the test cases along with overheads is contained in
              “AnalysisResult.txt”
           d. Multiple test cases may be combined into a single test case whenever feasible.
    This is enough to check that the tool is working.

CREATING OWN JAVA PROGRAM AND TESTING:
1. Compile the java programs with javac *.java from program directory

2. Perform initialization by source ./scripts/init.sh from omen+ directory (~/Desktop/omen+/omen+)

3. Execute the command when sequential tests are given : java -cp $OMEN_CLASSPATH:<Program Directory> omen.util.OmenDriver --user-specified-test <Sequential test name> -omen-output-dir <directory where  to write output>
   Execute the command when no sequential tests are given: java -cp $OMEN_CLASSPATH:<Program Directory>:./classes -Xmx4084m omen.util.OmenDriver -omen-output-dir <directory where to write output> -randoop-arguments gentests --testclass Account --timelimit=1 --maxsize=10

RUNNING ALL TESTS :

    1. To execute other tests that are provided execute “sh ./scripts/test<id>.sh” from the current directory. Where <id>
       stands for the test case index.

    2. To execute all the test cases execute “sh ./scripts/testall.sh” rom the current directory.


RUNNING BENCHMARKS : 

   
    1. To test a benchmark, execute “sh ./scripts/B<id>.sh <option>” from the current directory.
       
        i. B<id> stands for the benchmark id listed in the paper. Replace <id> with the index of benchmark.

        ii. As <option> you can pass 1, 2 or 3. This will informs what sequential tests must be used by OMEN.
 		1  :  Written by us
        	2  :  Stored tests generated by RANDOOP. 
        	3  :  Generated your own test cases at run time.

    2. The output will be placed in ./output/B<id>
  	
  

OPTIONS : We support the following run time options :
	
	 1. omen.kappa          : Specifies the maximum cycle length of the deadlock. By default it is set to 2. Any
                                  length higher than 5 is not allowed and will be reset to 5.
	 2. omen-output-dir     : The directory in which the output from the tool should be placed. By default it is set to
                                  “./output”. 
         3. omen.runwolf        : Set to true/false. Whether deadlock detection must be run or not. By default it is 
			          set to true.
	 4. user-specified-test : The fully qualified sequential test case class name. The complied classes must be
                                  available in the classpath.
	 5. randoop-arguments   : The arguments that are to be passed to the RANDOOP for test generation.

	NOTE: One of option 4 or 5 is necessary for the tool to run.
              All arguments following option 5 will be treated as arguments to RANDOOP.



********* IMPORTANT NOTE************

Any file whose name contains keyword “Test” will be treated as input test case.

************************************

